{
    "what is a linked list?": "A linked list is a linear data structure where elements are stored in nodes, and each node contains a data element and a pointer to the next node in the sequence.",
    "what is an array?": "An array is a collection of items stored at contiguous memory locations. It's a fundamental data structure in most programming languages.",
    "what is time complexity?": "Time complexity is a way to measure how the runtime of an algorithm grows as the input size grows. It's typically expressed using Big O notation.",
    "how to implement a linked list?": "To implement a linked list, you need a node class/struct with a data field and a pointer to the next node. Then, you can create operations like insert, delete, and search.",
    "explain graph data structure": "A graph data structure consists of a finite set of vertices (or nodes) and a set of edges that connect these vertices. Graphs can be directed or undirected.",
    "what is a stack?": "A stack is a linear data structure that follows the LIFO (Last-In, First-Out) principle. The last element added to the stack is the first element to be removed.",
    "what is a queue?": "A queue is a linear data structure that follows the FIFO (First-In, First-Out) principle. The first element added to the queue is the first element to be removed.",
    "hash map":"A Hash Map is a data structure that stores key-value pairs and provides fast access to data using a technique called hashing.",
    
    "linked list": "A linked list is a sequence of elements, called nodes, where each node contains a data part and a pointer to the next node.",
    "array": "An array is a collection of items of the same data type, stored in contiguous memory locations.its very cool.",
    "tree": "A tree is a hierarchical data structure that consists of nodes connected by edges. It has a root node and can have multiple levels of child nodes.",
    "graph": "A graph is a data structure consisting of a set of vertices (or nodes) and a set of edges that connect these vertices.",
    "stack": "A stack is a LIFO (Last-In, First-Out) data structure, often visualized as a stack of plates.",
    "queue": "A queue is a FIFO (First-In, First-Out) data structure, resembling a waiting line.",
    "sorting": "Sorting is the process of arranging elements in a specific order (e.g., ascending or descending).",
    "searching": "Searching is the process of finding a particular element within a collection of data.",
    "binary search": "Binary search is a fast search algorithm with time complexity O(log n). It works on sorted arrays by repeatedly dividing the search interval in half.",
    "hash table": "A hash table is a data structure that maps keys to values using a hash function, providing efficient insertion, deletion, and lookup operations.",
    "binary tree": "A binary tree is a tree data structure where each node has at most two children, referred to as left child and right child.",
    "binary search tree": "A Binary Search Tree (BST) is a binary tree where each node has at most two children, and for each node, all values in the left subtree are less than the node's value, and all values in the right subtree are greater. Common operations like search, insert, and delete have an average time complexity of O(log n).",
    "depth first search": "Depth-First Search (DFS) is a graph traversal algorithm that explores as far as possible along each branch before backtracking. It uses a stack (or recursion) to keep track of nodes to visit next. Time complexity: O(V + E), where V is the number of vertices and E is the number of edges.",
    "breadth first search": "Breadth-First Search (BFS) is a graph traversal algorithm that explores all vertices at the present depth before moving on to vertices at the next depth level. It uses a queue to keep track of nodes to visit next. Time complexity: O(V + E), where V is the number of vertices and E is the number of edges.",
    "runtime": "In the context of algorithms, runtime refers to the time complexity of an algorithm, which is a measure of how the execution time increases as the input size grows. It's typically expressed using Big O notation, such as O(1) for constant time, O(n) for linear time, O(log n) for logarithmic time, etc.",
    "performance": "In the context of data structures and algorithms, performance refers to the efficiency of operations in terms of time complexity (how execution time scales with input size) and space complexity (how memory usage scales with input size). Different algorithms and data structures offer different performance characteristics for operations like insertion, deletion, search, etc.",

    "What is the time complexity for searching in a linked list?": "The time complexity for searching in a singly linked list is O(n) in the worst case and O(1) in the best case, where n is the number of nodes in the list.",
    "What is the time complexity for searching in an array?": "The time complexity for searching in an unsorted array is O(n) in the worst case and O(1) in the best case. For a sorted array, binary search can achieve O(log n) time complexity.",
    "Can you give an example of using linked list": "A linked list can be used to manage dynamic memory allocation, implement undo/redo functionality in editors, or create playlists in music players.",
    "How is graph is used": "Graphs are used in various applications such as social networks, mapping systems, network routing, and recommendation systems.",
    "How is stack used": "Stacks are utilized in function call management, expression evaluation, and undo/redo operations in applications.",
    "How is queue used": "Queues are employed in task scheduling, handling web requests, and managing buffers in computer systems.",
    "How to do sorting": "Sorting can be performed using algorithms like bubble sort, insertion sort, merge sort, quicksort, and many others.",
    "How to do searching": "Searching in data can be done by linear search or binary search.",
    "can you give an example of a binary search implementation": "Here's an example of binary search implementation in C++: \n```cpp\nint binarySearch(int arr[], int left, int right, int target) {\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n```",
    
    "hello": "Hello! I'm your DSA ChatBot. How can I help you with Data Structures and Algorithms today?",
    "hi": "Hi there! I'm your DSA ChatBot. Ask me anything about Data Structures and Algorithms!",
    "how are you": "I'm just a program, but I'm functioning well! How can I assist you with DSA topics?",
    "what can you do": "I can provide information about various data structures and algorithms, explain their time complexities, and provide code examples. Just ask me about any DSA topic!",
    "thank you": "You're welcome! Feel free to ask if you have more questions about DSA.",
    "goodbye": "Goodbye! Feel free to come back if you have more questions about data structures and algorithms.",
    "bye": "Bye! Have a great day!",
    "help": "I can help with various DSA topics like arrays, linked lists, trees, graphs, sorting algorithms, searching algorithms, and more. What would you like to know about?",
    "data structures": "Data structures are ways of organizing and storing data so that operations can be performed efficiently. Some common data structures include arrays, linked lists, stacks, queues, trees, graphs, and hash tables. What specific data structure would you like to learn about?",
    "algorithms": "Algorithms are step-by-step procedures for solving problems. I can explain various algorithms such as sorting (bubble sort, merge sort, quick sort), searching (binary search, linear search), graph algorithms (BFS, DFS), and more. Which algorithm would you like to know about?",

    "tell me a joke":"Why did the array break up with the linked list? Because it felt static while the linked list was too dynamic! ðŸ˜†"

}